<?php
/**
 * @file
 * Main module file, containing File field formatter, global configuration form
 * functions, formatter configuration functions and helper functions for
 * conversion pdf files to swf and json.
 */

/**
 * Implements hook_menu().
 */
function flexpaper_menu() {
  $items['admin/config/flexpaper'] = array(
    'title' => 'Flexpaper settings',
    'description' => 'Global settings for flexpaper module',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('flexpaper_settings_page_form'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Settings page form callback.
 */
function flexpaper_settings_page_form($form, &$form_state) {
  $form['flexpaper_path_to_pdf2swf'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to pdf2swf'),
    '#description' => t('For example, /usr/local/bin/pdf2swf'),
    '#default_value' => variable_get('flexpaper_path_to_pdf2swf', 'pdf2swf'),
    '#size' => 100,
    '#maxlength' => 300,
  );
  $form['flexpaper_path_to_pdf2json'] = array(
    '#type' => 'textfield',
    '#title' => t('Flexpaper key'),
    '#description' => t('For example, /usr/local/bin/pdf2json'),
    '#default_value' => variable_get('flexpaper_path_to_pdf2json', 'pdf2json'),
    '#size' => 100,
    '#maxlength' => 300,
  );
  return system_settings_form($form);
}

/**
 * Validation handler for settings page form.
 */
function flexpaper_settings_page_form_validate($form, &$form_state) {
  $path_to_pdf2swf = $form_state['values']['flexpaper_path_to_pdf2swf'];
  $path_to_pdf2json = $form_state['values']['flexpaper_path_to_pdf2json'];
  if (!flexpaper_pdf2swf_enabled($path_to_pdf2swf)) {
    form_set_error('path_to_pdf2swf', t('Path to pdf2swf tool is not properly set.'));
  }
  if (!flexpaper_pdf2json_enabled($path_to_pdf2json)) {
    form_set_error('path_to_pdf2json', t('Path to pdf2json tool is not properly set.'));
  }
}

/**
 * Implements hook_permission().
 */
function flexpaper_permission() {
  return array(
    'generate swf files' => array(
      'title' => t('Generate swf files'),
      'description' => t('Generate swf files from pdf.'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function flexpaper_field_formatter_info() {
  return array(
    'flexpaper_formatter' => array(
      'label' => t('Flexpaper formatter'),
      'descrition' => t('Provides a way to show pdf files using flexpaper'),
      'field types' => array('file'),
      'settings' => array(
        'page_loading_mode' => 'split',
        'show_file_link' => TRUE,
        'scale' => 0.6,
        'zoom_transition' => 'easeOut',
        'zoom_time' => 0.5,
        'zoom_interval' => 0.2,
        'fit_page_on_load' => FALSE,
        'fit_width_on_load' => TRUE,
        'full_screen_as_max_window' => FALSE,
        'progressive_loading' => FALSE,
        'min_zoom_size' => 0.2,
        'max_zoom_size' => 5,
        'search_match_all' => FALSE,
        'init_view_mode' => 'Portrait',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function flexpaper_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = '';
  $display = $instance['display'][$view_mode];
  if ($display['type'] = 'flexpaper_formatter') {
    $summary = t('Click to change flexpaper settings');
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function flexpaper_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  if ($display['type'] == 'flexpaper_formatter') {
    $element['page_loading_mode'] = array(
      '#type' => 'select',
      '#title' => t('Page loading mode'),
      '#options' => array(
        'split' => t('Split'),
        'one file' => t('One file'),
      ),
      '#default_value' => $settings['page_loading_mode'],
      '#description' => t("You can select how your documents will be loaded. If you choose split mode, flexpaer will download other pages when needed. It's preferable for large pdfs."),
    );
    $element['show_file_link'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show file link'),
      '#default_value' => $settings['show_file_link'],
      '#description' => t('Show file link above the flexpaper viewer.'),
    );
    $element['scale'] = array(
      '#type' => 'textfield',
      '#title' => t('Scale'),
      '#default_value' => $settings['scale'],
      '#required' => TRUE,
    );
    // @TODO not all possible Tweener zoom transition elements are added here.
    $element['zoom_transition'] = array(
      '#type' => 'select',
      '#title' => t('Page loading mode'),
      '#options' => array(
        'easeOut' => t('easeOut'),
        'linear' => t('linear'),
        'easenone' => t('easenone'),
        'easeInSine' => t('easeInSine'),
        'easeOutQuad' => t('easeOutQuad'),
      ),
      '#default_value' => $settings['zoom_transition'],
    );
    $element['zoom_time'] = array(
      '#type' => 'textfield',
      '#title' => t('Zoom time'),
      '#default_value' => $settings['zoom_time'],
      '#required' => TRUE,
    );
    $element['zoom_interval'] = array(
      '#type' => 'textfield',
      '#title' => t('Zoom interval'),
      '#default_value' => $settings['zoom_interval'],
      '#required' => TRUE,
    );
    $element['fit_page_on_load'] = array(
      '#type' => 'checkbox',
      '#title' => t('Fit page on load'),
      '#default_value' => $settings['fit_page_on_load'],
    );
    $element['fit_width_on_load'] = array(
      '#type' => 'checkbox',
      '#title' => t('Fit width on load'),
      '#default_value' => $settings['fit_width_on_load'],
    );
    $element['full_screen_as_max_window'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use full screen as max window'),
      '#default_value' => $settings['full_screen_as_max_window'],
    );
    $element['progressive_loading'] = array(
      '#type' => 'checkbox',
      '#title' => t('Progressive loading'),
      '#default_value' => $settings['progressive_loading'],
    );
    $element['min_zoom_size'] = array(
      '#type' => 'textfield',
      '#title' => t('Min zoom size'),
      '#default_value' => $settings['min_zoom_size'],
      '#required' => TRUE,
    );
    $element['max_zoom_size'] = array(
      '#type' => 'textfield',
      '#title' => t('Max zoom size'),
      '#default_value' => $settings['max_zoom_size'],
      '#required' => TRUE,
    );
    $element['search_match_all'] = array(
      '#type' => 'checkbox',
      '#title' => t('Search match all'),
      '#default_value' => $settings['search_match_all'],
    );
    $element['init_view_mode'] = array(
      '#type' => 'select',
      '#title' => t('Initial view mode'),
      '#options' => array(
        'Portrait' => t('Portrait'),
        'TwoPage' => t('Two pages'),
        'Tile' => t('Tile'),
      ),
      '#default_value' => $settings['init_view_mode'],
    );

  }
  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function flexpaper_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $base_url;
  $element = array();
  if ($display['type'] == 'flexpaper_formatter') {
    $files = array();
    foreach ($items as $delta => $item) {
      if ($file = file_load($item['fid'])) {
        $files[$file->fid] = $file;
      }
    }
    // Check if all files have corresponding swfs.
    $status = flexpaper_check_files_status($files);
    if (!empty($status)) {
      $settings = $display['settings'];
      // Flexpaper settings.
      $js_settings['scale'] = $settings['scale'];
      $js_settings['zoomTransition'] = $settings['zoom_transition'];
      $js_settings['zoomTime'] = $settings['zoom_time'];
      $js_settings['zoomInterval'] = $settings['zoom_interval'];
      $js_settings['fitPageOnLoad'] = $settings['fit_page_on_load'];
      $js_settings['fullScreenAsMaxWindow'] = $settings['full_screen_as_max_window'];
      $js_settings['progressiveLoading'] = $settings['progressive_loading'];
      $js_settings['minZoomSize'] = $settings['min_zoom_size'];
      $js_settings['maxZoomSize'] = $settings['max_zoom_size'];
      $js_settings['searchMatchAll'] = $settings['search_match_all'];
      $js_settings['initViewMode'] = $settings['init_view_mode'];

      $library_path = libraries_get_path('flexpaper');
      $js_settings['jsDirectory'] = $base_url . '/' . $library_path . '/js/';
      $delta = 0;
      foreach ($status as $fid => $conversion_done) {
        if ($conversion_done) {
          $file = file_load($fid);
          $folder_url = file_create_url(_flexpaper_get_files_folder_path($file));
          $files_directory_info = & drupal_static('flexpaper_files_directory_info');
          $files_arr = $files_directory_info[$fid];
          // Check if we have json.
          if (in_array($fid . '.js', $files_arr)) {
            $js_settings['jsonFiles'][] = $folder_url . '/' . $fid . '.js';
            $swf_number = (count($files_arr) - 4)/2;
          }
          else {
            $js_settings['jsonFiles'][] = '';
            $swf_number = (count($files_arr) - 3)/2;
          }
          if ($settings['page_loading_mode'] == 'split') {
            $js_settings['paths'][] = $folder_url . '/{' . $fid . '_[*,0].swf,' . $swf_number . '}';
            $js_settings['imgFiles'][] = $folder_url . '/' . $fid . '_{page}.png';
          }
          else {
            $js_settings['paths'][] = $folder_url . '/' . $fid . '.swf';
          }
          $element[$delta]['#show_flexpaper'] = TRUE;
        }
        else {
          $element[$delta]['#show_flexpaper'] = FALSE;
        }
        $element[$delta] += array(
          '#theme' => 'flexpaper_container',
          '#show_file_link' => $settings['show_file_link'],
          '#file' => $files[$fid],
          '#attached' => array(
            'js' => array(
              $library_path . '/js/flexpaper.js',
              $library_path . '/js/flexpaper_handlers.js',
              drupal_get_path('module', 'flexpaper') . '/js/flexpaper_init.js',
            ),
            'css' => array(
              drupal_get_path('module', 'flexpaper') . '/css/flexpaper.css',
            ),
          ),
        );
        $delta++;
      }
      drupal_add_js(array('flexpaper' => $js_settings), 'setting');
    }
  }
  return $element;
}

/**
 * Check if each file with fid from given array has corresponding swf files.
 */
function flexpaper_check_files_status($files) {
  $status = array();
  $batch = array(
    'title' => t('Generating swf files'),
    'operations' => array(),
  );
  foreach ($files as $fid => $file) {
    if ($file->filemime == 'application/pdf') {
      $files_directory = _flexpaper_get_files_folder_path($file);
      if (!file_prepare_directory($files_directory)) {
        $status[$fid] = FALSE;
        $batch['operations'][] = array(
          'flexpaper_generate_swfs_batch_process',
          array($file),
        );
      }
      else {
        // Assume that if main swf file is in place, everything is good.
        $files_arr = scandir(drupal_realpath($files_directory));
        // Put it in static cache, because we need it later.
        $files_directory_info = & drupal_static('flexpaper_files_directory_info');
        $files_directory_info[$fid] = $files_arr;
        if (in_array($fid . '.swf', $files_arr)) {
          $status[$fid] = TRUE;
        }
        else {
          $status[$fid] = FALSE;
        }
      }
    }
    else {
      $status[$fid] = FALSE;
    }
  }
  if (count($batch['operations']) > 0 && user_access('generate swf files')) {
    batch_set($batch);
    batch_process();
  }
  return $status;
}

/**
 * Flexpaper processor - Batch API process callback.
 */
function flexpaper_generate_swfs_batch_process($file, &$context) {
  $fid = $file->fid;
  $pdf_path = drupal_realpath($file->uri);
  $files_directory = drupal_realpath(_flexpaper_get_files_folder_path($file));
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;
    $pages_number = _flexpaper_get_pdf_pages_number(drupal_realpath($file->uri));
    if ($pages_number != 0) {
      // It means that our function was able to count number of pages.
      // So, we can show progress info for user.
      $context['sandbox']['progress_info'] = TRUE;
      $context['sandbox']['max'] = _flexpaper_get_pdf_pages_number(drupal_realpath($file->uri)) + 1;
      $context['sandbox']['last_swf'] = FALSE;
      $context['sandbox']['error'] = FALSE;
    }
    else {
      // We don't have number of pages. One attempt to make all operations.
      $context['sandbox']['progress_info'] = FALSE;
    }
    file_prepare_directory($files_directory, FILE_CREATE_DIRECTORY);
  }
  $first_page_number = 0;
  $last_page_number = 0;
  if ($context['sandbox']['progress_info']) {
    if (!$context['sandbox']['last_swf']) {
      $first_page_number = $context['sandbox']['progress'] + 1;
      $last_page_number = $context['sandbox']['progress'] + 5;
//      $context['sandbox']['error'] = _flexpaper_convert_pdf($files_directory,$fid,$pdf_path,$first_page_number,$last_page_number);
      _flexpaper_convert_pdf($files_directory,$fid,$pdf_path,$first_page_number,$last_page_number);
      $context['sandbox']['progress'] = $last_page_number;
    }
    if (!$context['sandbox']['error']) {
      if ($context['sandbox']['progress'] < $context['sandbox']['max'] - 1) {
        $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
        $context['message'] = t("@progress of @max files are processed", array(
          '@progress' => $context['sandbox']['progress'],
          '@max' => $context['sandbox']['max'],
        ));
      }
      elseif ($context['sandbox']['last_swf'] == FALSE) {
        $context['finished'] = ($context['sandbox']['max'] - 1) / $context['sandbox']['max'];
        $context['sandbox']['last_swf'] = TRUE;
        $context['message'] = t('Last swf is processing');
      }
      else {
        // Create common swf.
        $context['sandbox']['error'] = _flexpaper_convert_pdf($files_directory,$fid,$pdf_path,$first_page_number,$last_page_number);
        // Create json file if pdf2json is available.
        $command = '"' . variable_get('flexpaper_path_to_pdf2json', 'pdf2json') . '" "' . $pdf_path . '" -enc UTF-8 -compress -hidden "' . $files_directory . "/" . $fid . '.js"';
        _flexpaper_exec_conversion_command($command);
        $context['message'] = t("@max of @max files are processed", array('@max' => $context['sandbox']['max']));
        $context['finished'] = 1;
      }
    }
    else {
      $context['finished'] = 1;
    }
  }
  else {
    // @TODO Test this codeblock.
    $command = '"' . variable_get('flexpaper_path_to_pdf2swf', 'pdf2swf') . '" "' . $pdf_path . '" -o "' . $files_directory . '/' . $fid . '_%.swf" -f -T 9 -t -s storeallcharacters';
    _flexpaper_exec_conversion_command($command);
    $command = '"' . variable_get('flexpaper_path_to_pdf2swf', 'pdf2swf') . '" "' . $pdf_path . '" -o "' . $files_directory . '/' . $fid . '.swf" -f -T 9 -t -s storeallcharacters';
    _flexpaper_exec_conversion_command($command);
    $command = '"' . variable_get('flexpaper_path_to_pdf2json', 'pdf2json') . '" "' . $pdf_path . '" -enc UTF-8 -compress -hidden "' . $files_directory . "/" . $fid . '.js"';
    _flexpaper_exec_conversion_command($command);
    $context['finished'] = 1;
  }
}

/**
 * Execute conversion command. Return FALSE if there was an error.
 */
function _flexpaper_exec_conversion_command($command) {
  $output = shell_exec($command);
  return _flexpaper_check_error_in_conversion($output);
}
/**
 * Create swf and png files for range of pdf pages. Return FALSE if there was an error.
 */
function _flexpaper_convert_pdf($files_directory,$fid,$pdf_path,$first_page_number,$last_page_number){
  $swf_output_path = $files_directory . '/' . $fid . "_%.swf";
  // zero page numbers mean that this is last batch process
  if($first_page_number > 0 && $last_page_number > 0){
    $command = variable_get('flexpaper_path_to_pdf2swf', 'pdf2swf') . ' "' . $pdf_path . '" -o "' . $swf_output_path . '" -p ' . $first_page_number . '-' . $last_page_number . ' -f -T 9 -t -s storeallcharacters';
    $error =  _flexpaper_exec_conversion_command($command);
  }else{
    $command = variable_get('flexpaper_path_to_pdf2swf', 'pdf2swf') . " '" . $pdf_path . "' -o '" . $files_directory . '/' . $fid . ".swf' -f -T 9 -t -s storeallcharacters";
    $error =  _flexpaper_exec_conversion_command($command);
    if(!$error){
      $swf_files = file_scan_directory($files_directory,'/\.swf$/');
      if(!empty($swf_files)){
        $swf_files = array_values($swf_files);
        usort($swf_files,function($a,$b){
          $a_val = (int)str_replace('_','',$a->name);
          $b_val = (int)str_replace('_','',$b->name);
          if($a_val > $b_val){
            return 1;
          }elseif($a_val == $b_val){
            return 0;
          }else{
            return -1;
          }
        });
        array_shift($swf_files);
        foreach($swf_files as $key => $data){
          $key++;
          $command = variable_get('flexpaper_path_to_swfrender', 'swfrender') . ' "' . $data->uri . '" -o "' . $files_directory . '/' . $fid . '_'.$key.'.png" -X 1024 -s keepaspectratio';
          if(!_flexpaper_exec_conversion_command($command)){
            $error = true;
//            break;
          }
        }
        $png_files =file_scan_directory($files_directory,'/\.png$/');
        if(count($png_files) != count($swf_files)){
          watchdog('flexpaper','Unable to create png some files',array(),WATCHDOG_WARNING);
          $error = true;
        }
      }else{
        $error = true;
      }
    }
  }
  return $error;
}
/**
 * Check if there was an error in conversion. Return TRUE if error appeared.
 */
function _flexpaper_check_error_in_conversion($output) {
  $pattern = '/(FATAL|ERROR)/i';
  preg_match($pattern, $output, $m);
  if (!empty($m)) {
    watchdog('flexpaper', 'Error in conversion pdf to swf process.
    Log info: %info', array('%info' => $output), WATCHDOG_ERROR);
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function flexpaper_theme() {
  return array(
    'flexpaper_container' => array(
      'template' => 'theme/flexpaper-container',
      'variables' => array(
        'show_file_link' => NULL,
        'file' => NULL,
        'show_flexpaper' => NULL,
      ),
    ),
  );
}

/**
 * Implements template_preprocess_HOOK() for theme_flexpaper_container().
 */
function template_preprocess_flexpaper_container(&$variables) {
  $file = $variables['file'];
  if ($variables['show_file_link']) {
    $variables['file_link'] = theme('file_link', array(
      'file' => $file,
      'icon_directory' => variable_get('file_icon_directory', drupal_get_path('module', 'file') . '/icons'),
    ));
  }
  else {
    $variables['file_link'] = FALSE;
  }
}

/**
 * Count number of pages in PDF file.
 */
function _flexpaper_get_pdf_pages_number($filepath) {
  // This is a helper function. So, if something go wrong here we can continue
  // without knowledge about the exact number of pages. That's why @ operator is
  // here.
  $stream = @fopen($filepath, "r");
  $pdf_content = @fread($stream, filesize($filepath));
  $first_value = 0;
  $second_value = 0;
  if (preg_match("/\/N\s+([0-9]+)/", $pdf_content, $matches)) {
    $first_value = $matches[1];
  }

  if (preg_match_all("/\/Count\s+([0-9]+)/s", $pdf_content, $matches)) {
    $second_value = max($matches[1]);
  }
  $max = (($second_value != 0) ? $second_value : max($first_value, $second_value));
  @fclose($stream);
  if ($max == 0) {
    if (extension_loaded('imagick')) {
      try {
        $im = new imagick($filepath);
        $max = $im->getNumberImages();
      }
      catch (Exception $ex) {
        watchdog('flexpaper', 'Error in attempt to count number of pages using imagick. Exception: %info', array('%info' => $ex->getMessage()), WATCHDOG_ERROR);
      }
    }
  }
  return $max;
}

/**
 * Return folder path for flexpaper files by the given original file
 */
function _flexpaper_get_files_folder_path($file) {
  return file_default_scheme() . '://flexpaper/' . $file->fid . '_files';
}

/**
 * Implements hook_file_delete().
 */
function flexpaper_file_delete($file) {
  // We should delete all flexpaper files.
  $files_directory = _flexpaper_get_files_folder_path($file);
  if (file_prepare_directory($files_directory)) {
    file_unmanaged_delete_recursive($files_directory);
  }
}

/**
 * Check if pdf2swf tool is available.
 */
function flexpaper_pdf2swf_enabled($path_to_pdf2swf) {
  try {
    if (function_exists('exec') && (DIRECTORY_SEPARATOR == '/' || (DIRECTORY_SEPARATOR == '\\' && $path_to_pdf2swf != 'pdf2swf'))) {
      if (PHP_OS == "WIN32" || PHP_OS == "WINNT") {
        exec('"' . $path_to_pdf2swf . '"' . ' --version 2>&1', $out);
      }
      else {
        exec($path_to_pdf2swf . ' --version 2>&1', $out);
      }
      if (empty($out)) {
        return FALSE;
      }
      else {
        if (strpos($out[0], 'swftools') !== FALSE) {
          return TRUE;
        }
        else {
          return FALSE;
        }
      }
    }
    else {
      return FALSE;
    }
  }
  catch (Exception $ex) {
    return FALSE;
  }
}

/**
 * Check if pdf2json tool is available.
 */
function flexpaper_pdf2json_enabled($path_to_pdf2json) {
  try {
    if (function_exists('exec') && (DIRECTORY_SEPARATOR == '/' || (DIRECTORY_SEPARATOR == '\\' && $path_to_pdf2json != 'pdf2json'))) {
      if (PHP_OS == "WIN32" || PHP_OS == "WINNT") {
        exec('"' . $path_to_pdf2json . '" -help 2>&1', $out);
      }
      else {
        exec($path_to_pdf2json . ' -help 2>&1', $out);
      }
      if (empty($out)) {
        return FALSE;
      }
      else {
        if (strpos($out[0], 'devaldi') !== FALSE) {
          return TRUE;
        }
        else {
          return FALSE;
        }
      }
    }
    else {
      return FALSE;
    }
  }
  catch (Exception $ex) {
    return FALSE;
  }
}
