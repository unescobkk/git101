<?php
/**
 * @file
 * Main module file for User expire module.
 */

/**
 * Implements hook_permission().
 */
function user_expire_permission() {
  return array(
    'set user expiration' => array(
      'title' => t('Set user expiration'),
    ),
  );
}

/**
 * Implements hook_user_load().
 */
function user_expire_user_load($users) {
  foreach ($users as $uid => $user) {
    $query = db_select('user_expire', 'ue');

    $expiration = $query->condition('ue.uid', $uid)
      ->fields('ue', array('expiration'))
      ->execute()
      ->fetchField();

    if (!empty($expiration)) {
      $user->expiration = $expiration;
    }
  }
}

/**
 * Implements hook_user_login().
 */
function user_expire_user_login(&$edit, $account) {
  user_expire_notify_user();
}

/**
 * Implements hook_user_cancel().
 */
function user_expire_user_cancel($edit, $account, $method) {
  user_expire_set_expiration($account);
}

/**
 * Implemens hook_field_extra_fields().
 */
function user_expire_fields_extra_fields() {
  $extra['user']['user'] = array(
    'form' => array(
      'user_expiration' => array(
        'label' => t('User expiration'),
        'description' => t('Date on which this account will expire.'),
      ),
    ),
  );

  return $extra;
}

/**
 * Implements hook_field_attach_form().
 */
function user_expire_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  if ($entity_type == 'user' && user_access('set user expiration')) {
    $form['user_expire'] = array(
      '#title' => t('User expiration'),
      '#type' => 'fieldset',
    );
    $form['user_expire']['user_expiration'] = array(
      '#title' => t('Set expiration for this user'),
      '#type' => 'checkbox',
      '#default_value' => !empty($entity->expiration),
    );

    if (isset($entity->expiration)) {
      $expiration = array(
        'day' => format_date($entity->expiration, 'custom', 'j'),
        'month' => format_date($entity->expiration, 'custom', 'n'),
        'year' => format_date($entity->expiration, 'custom', 'Y'),
      );
    }
    $form['user_expire']['user_expiration_date'] = array(
      '#title' => t('Expiration date'),
      '#type' => module_exists('date_popup') ? 'date_popup' : 'date',
      '#description' => t('The date on which this account will be disabled.'),
      '#date_format' => 'm/d/Y',
      '#default_value' => isset($entity->expiration) ? $expiration : NULL,
      '#required' => TRUE,
      '#states' => array(
        'invisible' => array(
           ':input[name="user_expiration"]' => array('checked' => FALSE),
        ),
      ),
    );
  }
}

/**
 * Implements hook_field_attach_submit().
 */
function user_expire_field_attach_submit($entity_type, $entity, $form, &$form_state) {
  if ($entity_type == 'user' && user_access('set user expiration')) {
    if ($form_state['values']['user_expiration']) {
      $timestamp = gmmktime(0, 0, 0, $form_state['values']['user_expiration_date']['month'], $form_state['values']['user_expiration_date']['day'], $form_state['values']['user_expiration_date']['year']);
      user_expire_set_expiration($entity, $timestamp);
    }
    else {
      user_expire_set_expiration($entity);
    }
  }
}

/**
 * Implements hook_cron().
 */
function user_expire_cron() {
  // Retrieve list of all users to be disabled.
  $query = db_select('user_expire', 'ue');

  $expired_users = $query->condition('ue.expiration', REQUEST_TIME, '<=')
    ->fields('ue', array('uid'))
    ->execute()
    ->fetchCol();

  $accounts = array();
  foreach ($expired_users as $uid) {
    $accounts[] = user_load($uid);
  }
  user_expire_expire_users($accounts);
}

/**
 * Set a specific user's expiration time.
 *
 * @param $account
 *   A user object to modify.
 * @param $expiration
 *   (Optional) An expiration time to set for the user. If this value is
 *   ommitted, it will be used to reset a user's expiration time.
 */
function user_expire_set_expiration($account, $expiration = NULL) {
  if (!empty($expiration)) {
    db_merge('user_expire')
      ->key(array('uid' => $account->uid))
      ->fields(array(
        'expiration' => $expiration,
      ))
      ->execute();

    user_expire_notify_user($account);
  }
  else {
    // Remove user expiration times for this user
    $deleted = db_delete('user_expire')
        ->condition('uid', $account->uid)
        ->execute();

    // Notify user that expiration time has been deleted.
    if ($deleted) {
      drupal_set_message(t('%name\'s expiration date has been reset.', array('%name' => $account->name)));
    }
  }
}

/**
 * Expire a group of users.
 *
 * @param $accounts
 *   A set of user objects to expire.
 */
function user_expire_expire_users(array $accounts) {
  foreach ($accounts as $account) {
    // Block user's account.
    user_save($account, array('status' => 0));
    // Remove current expiration time.
    user_expire_set_expiration($account);
    // Log notification to watchdog.
    watchdog('user_expire', 'User %name has expired.', array('%name' => $account->name));
  }
}

/**
 * Expire a single user.
 *
 * @param $account
 *   A single user object to expire.
 */
function user_expire_expire_user($account) {
  user_expire_expire_users(array($account));
}

/**
 * Displays a message to users with expiring accounts.
 *
 * @param $account
 *   (Optional) A user object on which to report.
 */
function user_expire_notify_user($account = NULL) {
  global $user;

  if (is_null($account)) {
    $account = $user;
  }

  // Only display a message on accounts with a current expiration date.
  if (empty($account->expiration)) {
    return;
  }

  if ($user->uid == $account->uid) {
    // Notify current user that expiration time is in effect.
    drupal_set_message(t('Your account\'s expiration date is set to @date.', array('@date' => format_date($account->expiration))));
  }
  else {
    // Notify user that expiration time is in effect for this user.
    drupal_set_message(t('%name\'s expiration date is set to @date.', array('%name' => $account->name, '@date' => format_date($account->expiration))));
  }
}
